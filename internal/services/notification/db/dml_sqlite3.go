// Code generated by go generate; DO NOT EDIT.
package db

import (
	stdsql "database/sql"
	"time"

	"github.com/sorintlab/errors"
	sq "github.com/huandu/go-sqlbuilder"

	"agola.io/agola/internal/sqlg/sql"

	types "agola.io/agola/services/notification/types"
)
var (
	runWebhookInsertSqlite3 = func(inId string, inRevision uint64, inCreationTime time.Time, inUpdateTime time.Time, inPayload []byte) *sq.InsertBuilder {
		ib:= sq.NewInsertBuilder()
		return ib.InsertInto("runwebhook").Cols("id", "revision", "creation_time", "update_time", "payload").Values(inId, inRevision, inCreationTime, inUpdateTime, inPayload)
	}
	runWebhookUpdateSqlite3 = func(curRevision uint64, inId string, inRevision uint64, inCreationTime time.Time, inUpdateTime time.Time, inPayload []byte) *sq.UpdateBuilder {
		ub:= sq.NewUpdateBuilder()
		return ub.Update("runwebhook").Set(ub.Assign("id", inId), ub.Assign("revision", inRevision), ub.Assign("creation_time", inCreationTime), ub.Assign("update_time", inUpdateTime), ub.Assign("payload", inPayload)).Where(ub.E("id", inId), ub.E("revision", curRevision))
	}

	runWebhookInsertRawSqlite3 = func(inId string, inRevision uint64, inCreationTime time.Time, inUpdateTime time.Time, inPayload []byte) *sq.InsertBuilder {
		ib:= sq.NewInsertBuilder()
		return ib.InsertInto("runwebhook").Cols("id", "revision", "creation_time", "update_time", "payload").SQL("").Values(inId, inRevision, inCreationTime, inUpdateTime, inPayload)
	}
)

func (d *DB) insertRunWebhookSqlite3(tx *sql.Tx, runwebhook *types.RunWebhook) error {
	q := runWebhookInsertSqlite3(runwebhook.ID, runwebhook.Revision, runwebhook.CreationTime, runwebhook.UpdateTime, runwebhook.Payload)

	if _, err := d.exec(tx, q); err != nil {
		return errors.Wrap(err, "failed to insert runWebhook")
	}

	return nil
}

func (d *DB) updateRunWebhookSqlite3(tx *sql.Tx, curRevision uint64, runwebhook *types.RunWebhook) (stdsql.Result, error) {
	q := runWebhookUpdateSqlite3(curRevision, runwebhook.ID, runwebhook.Revision, runwebhook.CreationTime, runwebhook.UpdateTime, runwebhook.Payload)

	res, err := d.exec(tx, q)
	if err != nil {
		return nil, errors.Wrap(err, "failed to update runWebhook")
	}

	return res, nil
}

func (d *DB) insertRawRunWebhookSqlite3(tx *sql.Tx, runwebhook *types.RunWebhook) error {
	q := runWebhookInsertRawSqlite3(runwebhook.ID, runwebhook.Revision, runwebhook.CreationTime, runwebhook.UpdateTime, runwebhook.Payload)

	if _, err := d.exec(tx, q); err != nil {
		return errors.Wrap(err, "failed to insert runWebhook")
	}

	return nil
}
var (
	runWebhookDeliveryInsertSqlite3 = func(inId string, inRevision uint64, inCreationTime time.Time, inUpdateTime time.Time, inSequence uint64, inRunWebhookID string, inDeliveryStatus types.DeliveryStatus, inDeliveredAt *time.Time, inStatusCode int) *sq.InsertBuilder {
		ib:= sq.NewInsertBuilder()
		return ib.InsertInto("runwebhookdelivery").Cols("id", "revision", "creation_time", "update_time", "sequence", "run_webhook_id", "delivery_status", "delivered_at", "status_code").Values(inId, inRevision, inCreationTime, inUpdateTime, inSequence, inRunWebhookID, inDeliveryStatus, inDeliveredAt, inStatusCode)
	}
	runWebhookDeliveryUpdateSqlite3 = func(curRevision uint64, inId string, inRevision uint64, inCreationTime time.Time, inUpdateTime time.Time, inRunWebhookID string, inDeliveryStatus types.DeliveryStatus, inDeliveredAt *time.Time, inStatusCode int) *sq.UpdateBuilder {
		ub:= sq.NewUpdateBuilder()
		return ub.Update("runwebhookdelivery").Set(ub.Assign("id", inId), ub.Assign("revision", inRevision), ub.Assign("creation_time", inCreationTime), ub.Assign("update_time", inUpdateTime), ub.Assign("run_webhook_id", inRunWebhookID), ub.Assign("delivery_status", inDeliveryStatus), ub.Assign("delivered_at", inDeliveredAt), ub.Assign("status_code", inStatusCode)).Where(ub.E("id", inId), ub.E("revision", curRevision))
	}

	runWebhookDeliveryInsertRawSqlite3 = func(inId string, inRevision uint64, inCreationTime time.Time, inUpdateTime time.Time, inSequence uint64, inRunWebhookID string, inDeliveryStatus types.DeliveryStatus, inDeliveredAt *time.Time, inStatusCode int) *sq.InsertBuilder {
		ib:= sq.NewInsertBuilder()
		return ib.InsertInto("runwebhookdelivery").Cols("id", "revision", "creation_time", "update_time", "sequence", "run_webhook_id", "delivery_status", "delivered_at", "status_code").SQL("").Values(inId, inRevision, inCreationTime, inUpdateTime, inSequence, inRunWebhookID, inDeliveryStatus, inDeliveredAt, inStatusCode)
	}
)

func (d *DB) insertRunWebhookDeliverySqlite3(tx *sql.Tx, runwebhookdelivery *types.RunWebhookDelivery) error {
	q := runWebhookDeliveryInsertSqlite3(runwebhookdelivery.ID, runwebhookdelivery.Revision, runwebhookdelivery.CreationTime, runwebhookdelivery.UpdateTime, runwebhookdelivery.Sequence, runwebhookdelivery.RunWebhookID, runwebhookdelivery.DeliveryStatus, runwebhookdelivery.DeliveredAt, runwebhookdelivery.StatusCode)

	if _, err := d.exec(tx, q); err != nil {
		return errors.Wrap(err, "failed to insert runWebhookDelivery")
	}

	return nil
}

func (d *DB) updateRunWebhookDeliverySqlite3(tx *sql.Tx, curRevision uint64, runwebhookdelivery *types.RunWebhookDelivery) (stdsql.Result, error) {
	q := runWebhookDeliveryUpdateSqlite3(curRevision, runwebhookdelivery.ID, runwebhookdelivery.Revision, runwebhookdelivery.CreationTime, runwebhookdelivery.UpdateTime, runwebhookdelivery.RunWebhookID, runwebhookdelivery.DeliveryStatus, runwebhookdelivery.DeliveredAt, runwebhookdelivery.StatusCode)

	res, err := d.exec(tx, q)
	if err != nil {
		return nil, errors.Wrap(err, "failed to update runWebhookDelivery")
	}

	return res, nil
}

func (d *DB) insertRawRunWebhookDeliverySqlite3(tx *sql.Tx, runwebhookdelivery *types.RunWebhookDelivery) error {
	q := runWebhookDeliveryInsertRawSqlite3(runwebhookdelivery.ID, runwebhookdelivery.Revision, runwebhookdelivery.CreationTime, runwebhookdelivery.UpdateTime, runwebhookdelivery.Sequence, runwebhookdelivery.RunWebhookID, runwebhookdelivery.DeliveryStatus, runwebhookdelivery.DeliveredAt, runwebhookdelivery.StatusCode)

	if _, err := d.exec(tx, q); err != nil {
		return errors.Wrap(err, "failed to insert runWebhookDelivery")
	}

	return nil
}
